{
	"name": "DF_Hospitaladmins",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DF_DS_ADLS_Hospitaladminssions_proj",
						"type": "DatasetReference"
					},
					"name": "Hospitaladminsource"
				},
				{
					"dataset": {
						"referenceName": "DS_DF_Country_lookup_Covid",
						"type": "DatasetReference"
					},
					"name": "Lookupdataset"
				},
				{
					"dataset": {
						"referenceName": "DF_DS_Dimdate",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DF_DS_ADLS_Cases_sink",
						"type": "DatasetReference"
					},
					"name": "Dailycasessink"
				},
				{
					"dataset": {
						"referenceName": "DF_DS_ADLS_Cases_sink",
						"type": "DatasetReference"
					},
					"name": "WeeklycasesSink"
				}
			],
			"transformations": [
				{
					"name": "removeURLandrenamecdateandweek"
				},
				{
					"name": "lookupcountry"
				},
				{
					"name": "select1"
				},
				{
					"name": "Splitbasedonindicator"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "WeeklyPivot"
				},
				{
					"name": "join2"
				},
				{
					"name": "DailyPivot"
				},
				{
					"name": "sort1"
				},
				{
					"name": "sort2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as integer,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Hospitaladminsource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Lookupdataset",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 2000,",
				"     ignoreNoFilesFound: false) ~> source1",
				"Hospitaladminsource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          Reported_date = date,",
				"          Reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeURLandrenamecdateandweek",
				"removeURLandrenamecdateandweek, Lookupdataset lookup(removeURLandrenamecdateandweek@country == Lookupdataset@country,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(Lookupdataset@country, true),",
				"     broadcast: 'auto')~> lookupcountry",
				"lookupcountry select(mapColumn(",
				"          country = removeURLandrenamecdateandweek@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          Reported_date,",
				"          Reported_year_week,",
				"          value,",
				"          population,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(indicator == 'Daily hospital occupancy' || indicator == 'Daily ICU occupancy',",
				"     disjoint: false) ~> Splitbasedonindicator@(Daily, Weekly)",
				"source1 derive(Derived_yearweek = year+'-W'+lpad(week_of_year, 2, '0')) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(Derived_yearweek),",
				"     Week_startdate = min(date),",
				"          Week_enddate = max(date)) ~> aggregate1",
				"Splitbasedonindicator@Weekly, aggregate1 join(Reported_year_week == Derived_yearweek,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          Reported_year_week,",
				"          population,",
				"          Week_startdate,",
				"          Week_enddate,",
				"          source),",
				"     pivotBy(indicator),",
				"     Count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true,",
				"     partitionBy('hash', 1)) ~> WeeklyPivot",
				"Splitbasedonindicator@Daily, aggregate1 join(Reported_year_week == Derived_yearweek,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          Reported_date,",
				"          Reported_year_week,",
				"          Week_startdate,",
				"          Week_enddate,",
				"          population,",
				"          source),",
				"     pivotBy(indicator),",
				"     Count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> DailyPivot",
				"DailyPivot sort(asc(Reported_year_week, false),",
				"     asc(country, false)) ~> sort1",
				"WeeklyPivot sort(asc(Reported_year_week, true),",
				"     asc(country, true)) ~> sort2",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {country     country_code     continent     population     indicator     weekly_count     year_week     rate_14_day     cumulative_count     source     note} as string",
				"     ),",
				"     partitionFileNames:['Dailycases_count.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Dailycasessink",
				"sort2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {country     country_code     continent     population     indicator     weekly_count     year_week     rate_14_day     cumulative_count     source     note} as string",
				"     ),",
				"     partitionFileNames:['WeeklycasesCount.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WeeklycasesSink"
			]
		}
	}
}